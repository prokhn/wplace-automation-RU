/**
 * –ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ wplace.live
 * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç wplace.live –≤ –±—Ä–∞—É–∑–µ—Ä–µ
 * 2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12 > –ö–æ–Ω—Å–æ–ª—å)
 * 3. –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter
 * 4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
 * 5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç
 */

class WPlaceBot {
    constructor() {
        this.isRunning = false;
        this.delay = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏ –≤ –º—Å
        this.currentPixel = 0;
        this.pixels = [];
        this.startX = 0;
        this.startY = 0;
        this.canvas = null;
        this.colorPalette = [];
        this.selectedColor = '#000000';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç
    init() {
        console.log('üé® WPlace Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
        this.findCanvas();
        this.findColorPalette();
        this.createControlPanel();
    }

    // –ù–∞—Ö–æ–¥–∏—Ç —Ö–æ–ª—Å—Ç wplace
    findCanvas() {
        // –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Ö–æ–ª—Å—Ç–∞
        const possibleSelectors = [
            'canvas',
            '#canvas',
            '.canvas',
            '[data-testid="canvas"]',
            'canvas[width]',
            'canvas[height]'
        ];

        for (const selector of possibleSelectors) {
            const element = document.querySelector(selector);
            if (element) {
                this.canvas = element;
                console.log('‚úÖ –•–æ–ª—Å—Ç –Ω–∞–π–¥–µ–Ω:', selector);
                return;
            }
        }

        console.error('‚ùå –•–æ–ª—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ wplace.live');
    }

    // –ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤
    findColorPalette() {
        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ü–≤–µ—Ç–∞–º–∏
        const colorElements = document.querySelectorAll('[id^="color-"]');
        
        colorElements.forEach(element => {
            const bgColor = window.getComputedStyle(element).backgroundColor;
            if (bgColor && bgColor !== 'rgba(0, 0, 0, 0)') {
                this.colorPalette.push({
                    element: element,
                    color: bgColor
                });
            }
        });

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.colorPalette.length} —Ü–≤–µ—Ç–æ–≤ –≤ –ø–∞–ª–∏—Ç—Ä–µ`);
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç RGB –≤ HEX
    rgbToHex(rgb) {
        const result = rgb.match(/\d+/g);
        if (!result) return '#000000';
        
        const [r, g, b] = result.map(num => parseInt(num));
        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }

    // –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ü–≤–µ—Ç –≤ –ø–∞–ª–∏—Ç—Ä–µ
    findClosestColor(targetColor) {
        if (this.colorPalette.length === 0) return null;

        let closestColor = this.colorPalette[0];
        let minDistance = Infinity;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç –≤ RGB
        const target = this.hexToRgb(targetColor);
        if (!target) return closestColor;

        this.colorPalette.forEach(paletteColor => {
            const rgb = this.rgbStringToObject(paletteColor.color);
            if (rgb) {
                const distance = Math.sqrt(
                    Math.pow(target.r - rgb.r, 2) +
                    Math.pow(target.g - rgb.g, 2) +
                    Math.pow(target.b - rgb.b, 2)
                );

                if (distance < minDistance) {
                    minDistance = distance;
                    closestColor = paletteColor;
                }
            }
        });

        return closestColor;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX –≤ RGB
    hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É RGB –≤ –æ–±—ä–µ–∫—Ç
    rgbStringToObject(rgb) {
        const result = rgb.match(/\d+/g);
        if (!result || result.length < 3) return null;
        
        return {
            r: parseInt(result[0]),
            g: parseInt(result[1]),
            b: parseInt(result[2])
        };
    }

    // –í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –≤ –ø–∞–ª–∏—Ç—Ä–µ
    selectColor(color) {
        const closestColor = this.findClosestColor(color);
        if (closestColor && closestColor.element) {
            closestColor.element.click();
            this.selectedColor = color;
            console.log(`üé® –í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: ${color}`);
            return true;
        }
        return false;
    }

    // –ö–ª–∏–∫–∞–µ—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
    clickCanvas(x, y) {
        if (!this.canvas) return false;

        const rect = this.canvas.getBoundingClientRect();
        const canvasX = x + rect.left;
        const canvasY = y + rect.top;

        // –°–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        const events = ['mousedown', 'mouseup', 'click'];
        
        events.forEach(eventType => {
            const event = new MouseEvent(eventType, {
                bubbles: true,
                cancelable: true,
                clientX: canvasX,
                clientY: canvasY,
                button: 0
            });
            this.canvas.dispatchEvent(event);
        });

        console.log(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ (${x}, ${y})`);
        return true;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤)
    loadSimpleImage(imageData, width, height) {
        this.pixels = [];
        
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const index = y * width + x;
                if (index < imageData.length) {
                    this.pixels.push({
                        x: x,
                        y: y,
                        color: imageData[index]
                    });
                }
            }
        }

        console.log(`üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${width}x${height} –ø–∏–∫—Å–µ–ª–µ–π (${this.pixels.length} –ø–∏–∫—Å–µ–ª–µ–π)`);
    }

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –º–∞–ª–µ–Ω—å–∫–æ–µ —Å–µ—Ä–¥—Ü–µ
    loadHeartImage() {
        const heart = [
            '‚¨ú', 'üü•', 'üü•', '‚¨ú', 'üü•', 'üü•', '‚¨ú',
            'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•',
            'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•',
            'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•',
            '‚¨ú', 'üü•', 'üü•', 'üü•', 'üü•', 'üü•', '‚¨ú',
            '‚¨ú', '‚¨ú', 'üü•', 'üü•', 'üü•', '‚¨ú', '‚¨ú',
            '‚¨ú', '‚¨ú', '‚¨ú', 'üü•', '‚¨ú', '‚¨ú', '‚¨ú'
        ];

        const colorMap = {
            'üü•': '#FF0000',
            '‚¨ú': '#FFFFFF'
        };

        const imageData = heart.map(emoji => colorMap[emoji] || '#FFFFFF');
        this.loadSimpleImage(imageData, 7, 7);
    }

    // –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî —Å–º–∞–π–ª–∏–∫
    loadSmileyImage() {
        const smiley = [
            '‚¨ú', '‚¨ú', 'üü®', 'üü®', 'üü®', '‚¨ú', '‚¨ú',
            '‚¨ú', 'üü®', 'üü®', 'üü®', 'üü®', 'üü®', '‚¨ú',
            'üü®', 'üü®', '‚¨õ', 'üü®', '‚¨õ', 'üü®', 'üü®',
            'üü®', 'üü®', 'üü®', 'üü®', 'üü®', 'üü®', 'üü®',
            'üü®', '‚¨õ', 'üü®', 'üü®', 'üü®', '‚¨õ', 'üü®',
            '‚¨ú', 'üü®', '‚¨õ', '‚¨õ', '‚¨õ', 'üü®', '‚¨ú',
            '‚¨ú', '‚¨ú', 'üü®', 'üü®', 'üü®', '‚¨ú', '‚¨ú'
        ];

        const colorMap = {
            'üü®': '#FFFF00',
            '‚¨õ': '#000000',
            '‚¨ú': '#FFFFFF'
        };

        const imageData = smiley.map(emoji => colorMap[emoji] || '#FFFFFF');
        this.loadSimpleImage(imageData, 7, 7);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç
    async start() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!');
            return;
        }

        if (this.pixels.length === 0) {
            console.log('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!');
            return;
        }

        this.isRunning = true;
        this.currentPixel = 0;
        console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

        while (this.isRunning && this.currentPixel < this.pixels.length) {
            const pixel = this.pixels[this.currentPixel];
            const x = this.startX + pixel.x;
            const y = this.startY + pixel.y;

            // –í—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç
            if (this.selectColor(pixel.color)) {
                // –û–∂–∏–¥–∞–µ—Ç, –ø–æ–∫–∞ —Ü–≤–µ—Ç –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω
                await this.sleep(200);
                
                // –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ —Ö–æ–ª—Å—Ç–µ
                this.clickCanvas(x, y);
                
                console.log(`‚úÖ –ü–∏–∫—Å–µ–ª—å ${this.currentPixel + 1}/${this.pixels.length} —Ä–∞–∑–º–µ—â–µ–Ω –≤ (${x}, ${y})`);
            }

            this.currentPixel++;
            
            // –û–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–∫—Å–µ–ª–µ–º
            await this.sleep(this.delay);
        }

        this.isRunning = false;
        console.log('‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!');
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç
    stop() {
        this.isRunning = false;
        console.log('‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    setStartPosition(x, y) {
        this.startX = x;
        this.startY = y;
        console.log(`üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: (${x}, ${y})`);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏
    setDelay(ms) {
        this.delay = ms;
        console.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${ms}–º—Å`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
    loadImageFromData(pixelData, name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') {
        if (!Array.isArray(pixelData)) {
            console.error('‚ùå –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ {x, y, color}');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        const isValidData = pixelData.every(pixel => 
            typeof pixel === 'object' && 
            typeof pixel.x === 'number' && 
            typeof pixel.y === 'number' && 
            typeof pixel.color === 'string'
        );

        if (!isValidData) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ö–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å {x, y, color}');
            return false;
        }

        this.pixels = pixelData.slice(); // –ö–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö
        console.log(`‚úÖ ${name} –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${pixelData.length} –ø–∏–∫—Å–µ–ª–µ–π`);
        
        // –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const maxX = Math.max(...pixelData.map(p => p.x));
        const maxY = Math.max(...pixelData.map(p => p.y));
        console.log(`üìê –†–∞–∑–º–µ—Ä—ã: ${maxX + 1}x${maxY + 1} –ø–∏–∫—Å–µ–ª–µ–π`);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        const uniqueColors = [...new Set(pixelData.map(p => p.color))];
        console.log(`üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${uniqueColors.length}`);

        return true;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL –¥–∞–Ω–Ω—ã—Ö (data URL)
    async loadImageFromUrl(imageUrl, maxWidth = 50, maxHeight = 50) {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL...');
            
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            return new Promise((resolve, reject) => {
                img.onload = () => {
                    try {
                        const pixelData = this.processImageToPixels(img, maxWidth, maxHeight);
                        this.loadImageFromData(pixelData, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL');
                        resolve(true);
                    } catch (error) {
                        reject(error);
                    }
                };
                
                img.onerror = () => {
                    reject(new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ URL'));
                };
                
                img.src = imageUrl;
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
    processImageToPixels(img, maxWidth, maxHeight) {
        // –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        const scale = Math.min(maxWidth / img.width, maxHeight / img.height);
        const width = Math.floor(img.width * scale);
        const height = Math.floor(img.height * scale);

        // –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ–ª—Å—Ç
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = width;
        canvas.height = height;

        // –†–∏—Å—É–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.imageSmoothingEnabled = false;
        ctx.drawImage(img, 0, 0, width, height);

        // –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
        const imageData = ctx.getImageData(0, 0, width, height);
        const data = imageData.data;

        const pixels = [];
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const index = (y * width + x) * 4;
                const r = data[index];
                const g = data[index + 1];
                const b = data[index + 2];
                const a = data[index + 3];

                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
                if (a < 128) continue;

                const color = '#' + [r, g, b].map(x => {
                    const hex = x.toString(16);
                    return hex.length === 1 ? '0' + hex : hex;
                }).join('');

                pixels.push({ x, y, color });
            }
        }

        return pixels;
    }

    // –°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    createControlPanel() {
        // –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingPanel = document.getElementById('wplace-bot-panel');
        if (existingPanel) {
            existingPanel.remove();
        }

        const panel = document.createElement('div');
        panel.id = 'wplace-bot-panel';
        panel.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: #2c2c2c;
            color: white;
            padding: 15px;
            border-radius: 8px;
            font-family: Arial, sans-serif;
            font-size: 12px;
            z-index: 10000;
            width: 250px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        `;

        panel.innerHTML = `
            <h3 style="margin: 0 0 10px 0; color: #4CAF50;">üé® WPlace Bot</h3>
            <div style="margin-bottom: 10px;">
                <label>–ü–æ–∑–∏—Ü–∏—è X: <input type="number" id="startX" value="100" style="width: 60px;"></label>
                <label>–ü–æ–∑–∏—Ü–∏—è Y: <input type="number" id="startY" value="100" style="width: 60px;"></label>
            </div>
            <div style="margin-bottom: 10px;">
                <label>–ó–∞–¥–µ—Ä–∂–∫–∞ (–º—Å): <input type="number" id="delay" value="1000" style="width: 80px;"></label>
            </div>
            <div style="margin-bottom: 10px;">
                <button id="loadHeart" style="margin-right: 5px; margin-bottom: 5px;">‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ</button>
                <button id="loadSmiley" style="margin-bottom: 5px;">üòä –°–º–∞–π–ª–∏–∫</button>
            </div>
            <div style="margin-bottom: 10px;">
                <input type="file" id="imageInput" accept="image/*" style="display: none;">
                <button id="loadCustom" style="background: #FF9800; color: white; border: none; padding: 6px 10px; border-radius: 4px; margin-right: 5px; margin-bottom: 5px; font-size: 11px;">üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
                <button id="openConverter" style="background: #9C27B0; color: white; border: none; padding: 6px 10px; border-radius: 4px; margin-right: 5px; margin-bottom: 5px; font-size: 11px;">üîß –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</button>
                <button id="openEditor" style="background: #E91E63; color: white; border: none; padding: 6px 10px; border-radius: 4px; margin-bottom: 5px; font-size: 11px;">üé® –†–µ–¥–∞–∫—Ç–æ—Ä</button>
            </div>
            <div style="margin-bottom: 10px;">
                <button id="startBot" style="background: #4CAF50; color: white; border: none; padding: 8px 12px; border-radius: 4px; margin-right: 5px;">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                <button id="stopBot" style="background: #f44336; color: white; border: none; padding: 8px 12px; border-radius: 4px;">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
            </div>
            <div id="status" style="font-size: 11px; color: #ccc;">
                –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤–æ
            </div>
        `;

        document.body.appendChild(panel);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('startX').addEventListener('input', (e) => {
            this.setStartPosition(parseInt(e.target.value) || 0, this.startY);
        });

        document.getElementById('startY').addEventListener('input', (e) => {
            this.setStartPosition(this.startX, parseInt(e.target.value) || 0);
        });

        document.getElementById('delay').addEventListener('input', (e) => {
            this.setDelay(parseInt(e.target.value) || 1000);
        });

        document.getElementById('loadHeart').addEventListener('click', () => {
            this.loadHeartImage();
            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –°–µ—Ä–¥—Ü–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
        });

        document.getElementById('loadSmiley').addEventListener('click', () => {
            this.loadSmileyImage();
            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –°–º–∞–π–ª–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω';
        });

        document.getElementById('startBot').addEventListener('click', () => {
            this.start();
            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
        });

        document.getElementById('stopBot').addEventListener('click', () => {
            this.stop();
            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        });

        document.getElementById('loadCustom').addEventListener('click', () => {
            document.getElementById('imageInput').click();
        });

        document.getElementById('imageInput').addEventListener('change', async (e) => {
            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                try {
                    document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...';
                    
                    const reader = new FileReader();
                    reader.onload = async (event) => {
                        try {
                            await this.loadImageFromUrl(event.target.result, 50, 50);
                            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!';
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                            document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
                        }
                    };
                    reader.readAsDataURL(file);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
                    document.getElementById('status').textContent = '–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞';
                }
            }
        });

        document.getElementById('openConverter').addEventListener('click', () => {
            const converterPath = window.location.origin + window.location.pathname.replace(/[^/]*$/, '') + 'image-converter.html';
            window.open(converterPath, '_blank');
        });

        document.getElementById('openEditor').addEventListener('click', () => {
            const editorPath = window.location.origin + window.location.pathname.replace(/[^/]*$/, '') + 'pixel-editor.html';
            window.open(editorPath, '_blank');
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç
const wplaceBot = new WPlaceBot();
wplaceBot.init();

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:
console.log(`
üé® WPlace Bot –∑–∞–≥—Ä—É–∂–µ–Ω! 

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- wplaceBot.setStartPosition(x, y) - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
- wplaceBot.setDelay(ms) - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–ª–∏–∫–∞–º–∏  
- wplaceBot.loadHeartImage() - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
- wplaceBot.loadSmileyImage() - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞
- wplaceBot.loadImageFromData(pixelData, name) - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
- wplaceBot.loadImageFromUrl(url, maxWidth, maxHeight) - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ URL
- wplaceBot.start() - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç
- wplaceBot.stop() - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç

üîß –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ image-converter.html –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É!
`);
